[1mdiff --git a/src/components/PDFNotebook.tsx b/src/components/PDFNotebook.tsx[m
[1mindex 25352c7..297305b 100644[m
[1m--- a/src/components/PDFNotebook.tsx[m
[1m+++ b/src/components/PDFNotebook.tsx[m
[36m@@ -1,4 +1,4 @@[m
[31m-import React, { useState, useCallback, ChangeEvent } from 'react';[m
[32m+[m[32mimport React, { useState, useCallback, ChangeEvent, useEffect } from 'react';[m
 import { Document, Page, pdfjs } from 'react-pdf';[m
 import 'react-pdf/dist/esm/Page/AnnotationLayer.css';[m
 import 'react-pdf/dist/esm/Page/TextLayer.css';[m
[36m@@ -16,15 +16,14 @@[m [minterface DocumentLoadSuccess {[m
   numPages: number;[m
 }[m
 [m
[31m-type LayoutMode = 'normal' | 'comparison' | 'reading';[m
[31m-[m
 const PDFNotebook: React.FC = () => {[m
   const [pdfFile, setPdfFile] = useState<File | null>(null);[m
   const [numPages, setNumPages] = useState<number | null>(null);[m
   const [ocrTexts, setOcrTexts] = useState<OcrTexts>({});[m
   const [loading, setLoading] = useState<boolean>(false);[m
   const [error, setError] = useState<string | null>(null);[m
[31m-  const [layoutMode, setLayoutMode] = useState<LayoutMode>('normal');[m
[32m+[m[32m  const [enlargedPage, setEnlargedPage] = useState<number | null>(null);[m
[32m+[m[32m  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);[m
 [m
   const onDocumentLoadSuccess = useCallback(({ numPages }: DocumentLoadSuccess) => {[m
     setNumPages(numPages);[m
[36m@@ -75,49 +74,37 @@[m [mconst PDFNotebook: React.FC = () => {[m
     }));[m
   }, []);[m
 [m
[31m-  // Calculate textarea height based on layout mode[m
[31m-  const getTextareaHeight = useCallback((pageNumber: number) => {[m
[31m-    switch (layoutMode) {[m
[31m-      case 'normal':[m
[31m-        return 'h-64'; // Fixed height like current implementation[m
[31m-      case 'comparison':[m
[31m-        return 'h-96'; // Larger height to better match PDF page height[m
[31m-      case 'reading':[m
[31m-        // Calculate height based on content length to avoid scrolling[m
[31m-        const text = ocrTexts[pageNumber] || '';[m
[31m-        const lineCount = text.split('\n').length;[m
[31m-        const estimatedLines = Math.max(lineCount, Math.ceil(text.length / 60));[m
[31m-        const totalLines = Math.max(4, estimatedLines + 2); // Add padding[m
[31m-        [m
[31m-        if (totalLines <= 6) return 'h-24';[m
[31m-        if (totalLines <= 10) return 'h-32';[m
[31m-        if (totalLines <= 16) return 'h-48';[m
[31m-        if (totalLines <= 24) return 'h-64';[m
[31m-        if (totalLines <= 32) return 'h-80';[m
[31m-        return 'h-96';[m
[31m-      default:[m
[31m-        return 'h-64';[m
[31m-    }[m
[31m-  }, [layoutMode, ocrTexts]);[m
[32m+[m[32m  const openEnlargedView = useCallback((pageNumber: number) => {[m
[32m+[m[32m    setEnlargedPage(pageNumber);[m
[32m+[m[32m    setIsModalOpen(true);[m
[32m+[m[32m  }, []);[m
 [m
[31m-  // Get textarea resize behavior based on layout mode[m
[31m-  const getTextareaResize = () => {[m
[31m-    return layoutMode === 'reading' ? 'resize-y' : 'resize-none';[m
[31m-  };[m
[32m+[m[32m  const closeEnlargedView = useCallback(() => {[m
[32m+[m[32m    setEnlargedPage(null);[m
[32m+[m[32m    setIsModalOpen(false);[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  // Handle escape key to close modal[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    const handleKeyDown = (event: KeyboardEvent) => {[m
[32m+[m[32m      if (event.key === 'Escape' && isModalOpen) {[m
[32m+[m[32m        closeEnlargedView();[m
[32m+[m[32m      }[m
[32m+[m[32m    };[m
 [m
[31m-  // Get CSS classes for the main container based on layout mode[m
[31m-  const getContainerClasses = () => {[m
[31m-    switch (layoutMode) {[m
[31m-      case 'normal':[m
[31m-        return 'grid grid-cols-1 lg:grid-cols-2 gap-8';[m
[31m-      case 'comparison':[m
[31m-        return 'grid grid-cols-1 lg:grid-cols-2 gap-8';[m
[31m-      case 'reading':[m
[31m-        return 'space-y-12'; // Single column for reading mode[m
[31m-      default:[m
[31m-        return 'grid grid-cols-1 lg:grid-cols-2 gap-8';[m
[32m+[m[32m    if (isModalOpen) {[m
[32m+[m[32m      document.addEventListener('keydown', handleKeyDown);[m
[32m+[m[32m      // Prevent body scroll when modal is open[m
[32m+[m[32m      document.body.style.overflow = 'hidden';[m
[32m+[m[32m    } else {[m
[32m+[m[32m      document.body.style.overflow = 'unset';[m
     }[m
[31m-  };[m
[32m+[m
[32m+[m[32m    return () => {[m
[32m+[m[32m      document.removeEventListener('keydown', handleKeyDown);[m
[32m+[m[32m      document.body.style.overflow = 'unset';[m
[32m+[m[32m    };[m
[32m+[m[32m  }, [isModalOpen, closeEnlargedView]);[m
 [m
   return ([m
     <div className="min-h-screen bg-gray-100">[m
[36m@@ -146,47 +133,6 @@[m [mconst PDFNotebook: React.FC = () => {[m
               </button>[m
             )}[m
           </div>[m
[31m-          [m
[31m-          {/* Layout Mode Selector */}[m
[31m-          {pdfFile && ([m
[31m-            <div className="mb-4">[m
[31m-              <label className="block text-sm font-medium text-gray-700 mb-2">[m
[31m-                ãƒ¬ã‚¤ã‚¢ã‚¦ãƒˆãƒ¢ãƒ¼ãƒ‰[m
[31m-              </label>[m
[31m-              <div className="flex gap-2">[m
[31m-                <button[m
[31m-                  onClick={() => setLayoutMode('normal')}[m
[31m-                  className={`px-3 py-2 text-sm font-medium rounded-lg transition-colors ${[m
[31m-                    layoutMode === 'normal'[m
[31m-                      ? 'bg-indigo-600 text-white'[m
[31m-                      : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'[m
[31m-                  }`}[m
[31m-                >[m
[31m-                  é€šå¸¸[m
[31m-                </button>[m
[31m-                <button[m
[31m-                  onClick={() => setLayoutMode('comparison')}[m
[31m-                  className={`px-3 py-2 text-sm font-medium rounded-lg transition-colors ${[m
[31m-                    layoutMode === 'comparison'[m
[31m-                      ? 'bg-indigo-600 text-white'[m
[31m-                      : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'[m
[31m-                  }`}[m
[31m-                >[m
[31m-                  æ¯”è¼ƒ[m
[31m-                </button>[m
[31m-                <button[m
[31m-                  onClick={() => setLayoutMode('reading')}[m
[31m-                  className={`px-3 py-2 text-sm font-medium rounded-lg transition-colors ${[m
[31m-                    layoutMode === 'reading'[m
[31m-                      ? 'bg-indigo-600 text-white'[m
[31m-                      : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'[m
[31m-                  }`}[m
[31m-                >[m
[31m-                  é€šèª­[m
[31m-                </button>[m
[31m-              </div>[m
[31m-            </div>[m
[31m-          )}[m
           {error && ([m
             <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">[m
               <p className="text-red-600 text-sm">{error}</p>[m
[36m@@ -201,128 +147,87 @@[m [mconst PDFNotebook: React.FC = () => {[m
 [m
         {/* PDF Display Area */}[m
         {pdfFile && ([m
[31m-          <div className={getContainerClasses()}>[m
[31m-            {layoutMode === 'reading' ? ([m
[31m-              // Reading mode: Single column layout with PDF and text for each page[m
[32m+[m[32m          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">[m
[32m+[m[32m            {/* PDF Pages Column */}[m
[32m+[m[32m            <div className="space-y-8">[m
[32m+[m[32m              <h2 className="text-xl font-semibold text-gray-700 sticky top-0 bg-gray-100 py-2">[m
[32m+[m[32m                PDF Pages[m
[32m+[m[32m              </h2>[m
               <Document[m
                 file={pdfFile}[m
                 onLoadSuccess={onDocumentLoadSuccess}[m
                 onLoadError={onDocumentLoadError}[m
                 loading={<div className="text-center py-8 text-gray-500">Loading PDF...</div>}[m
[31m-                className="space-y-12"[m
[32m+[m[32m                className="space-y-6"[m
               >[m
                 {numPages && Array.from({ length: numPages }, (_, index) => ([m
[31m-                  <div key={index + 1} className="bg-white p-6 rounded-lg shadow-md">[m
[31m-                    <h3 className="text-lg font-semibold text-gray-800 mb-4">[m
[31m-                      Page {index + 1}[m
[31m-                    </h3>[m
[31m-                    [m
[31m-                    {/* PDF Page */}[m
[31m-                    <div className="mb-6">[m
[31m-                      <div className="border border-gray-200 rounded-lg overflow-hidden">[m
[32m+[m[32m                  <div key={index + 1} className="bg-white p-4 rounded-lg shadow-md">[m
[32m+[m[32m                    <div className="mb-2 flex justify-between items-center">[m
[32m+[m[32m                      <span className="text-sm font-medium text-gray-600">[m
[32m+[m[32m                        Page {index + 1}[m
[32m+[m[32m                      </span>[m
[32m+[m[32m                      <div className="flex items-center gap-2">[m
[32m+[m[32m                        <span className="text-xs text-gray-400 hidden sm:inline">[m
[32m+[m[32m                          Click to enlarge[m
[32m+[m[32m                        </span>[m
[32m+[m[32m                        <span className="text-xs text-gray-400">[m
[32m+[m[32m                          {index + 1} of {numPages}[m
[32m+[m[32m                        </span>[m
[32m+[m[32m                      </div>[m
[32m+[m[32m                    </div>[m
[32m+[m[32m                    <div className="border border-gray-200 rounded-lg overflow-hidden cursor-pointer hover:shadow-lg hover:border-indigo-300 transition-all duration-200 group" onClick={() => openEnlargedView(index + 1)}>[m
[32m+[m[32m                      <div className="relative">[m
                         <Page[m
                           pageNumber={index + 1}[m
                           className="mx-auto"[m
                           scale={0.8}[m
                           loading={<div className="text-center py-8 text-gray-500">Loading page...</div>}[m
                         />[m
[32m+[m[32m                        {/* Hover overlay */}[m
[32m+[m[32m                        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 flex items-center justify-center">[m
[32m+[m[32m                          <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-white rounded-full p-3 shadow-lg">[m
[32m+[m[32m                            <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">[m
[32m+[m[32m                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />[m
[32m+[m[32m                            </svg>[m
[32m+[m[32m                          </div>[m
[32m+[m[32m                        </div>[m
                       </div>[m
                     </div>[m
[31m-                    [m
[31m-                    {/* OCR Text */}[m
[31m-                    <div>[m
[31m-                      <label [m
[31m-                        htmlFor={`ocr-text-${index + 1}`}[m
[31m-                        className="block text-sm font-medium text-gray-700 mb-2"[m
[31m-                      >[m
[31m-                        OCR Text[m
[31m-                        <span className="text-xs text-gray-400 ml-2">[m
[31m-                          {ocrTexts[index + 1]?.length || 0} characters[m
[31m-                        </span>[m
[31m-                      </label>[m
[31m-                      <textarea[m
[31m-                        id={`ocr-text-${index + 1}`}[m
[31m-                        value={ocrTexts[index + 1] || ''}[m
[31m-                        onChange={(e: ChangeEvent<HTMLTextAreaElement>) => handleOcrTextChange(index + 1, e.target.value)}[m
[31m-                        placeholder="Enter or paste OCR text for this page..."[m
[31m-                        className={`w-full ${getTextareaHeight(index + 1)} p-3 border border-gray-300 rounded-md [m
[31m-                          focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${getTextareaResize()}[m
[31m-                          text-sm leading-relaxed transition-colors`}[m
[31m-                      />[m
[31m-                    </div>[m
                   </div>[m
                 ))}[m
               </Document>[m
[31m-            ) : ([m
[31m-              // Normal and Comparison modes: Two column layout[m
[31m-              <>[m
[31m-                {/* PDF Pages Column */}[m
[31m-                <div className="space-y-8">[m
[31m-                  <h2 className="text-xl font-semibold text-gray-700 sticky top-0 bg-gray-100 py-2">[m
[31m-                    PDF Pages[m
[31m-                  </h2>[m
[31m-                  <Document[m
[31m-                    file={pdfFile}[m
[31m-                    onLoadSuccess={onDocumentLoadSuccess}[m
[31m-                    onLoadError={onDocumentLoadError}[m
[31m-                    loading={<div className="text-center py-8 text-gray-500">Loading PDF...</div>}[m
[31m-                    className="space-y-6"[m
[31m-                  >[m
[31m-                    {numPages && Array.from({ length: numPages }, (_, index) => ([m
[31m-                      <div key={index + 1} className="bg-white p-4 rounded-lg shadow-md">[m
[31m-                        <div className="mb-2 flex justify-between items-center">[m
[31m-                          <span className="text-sm font-medium text-gray-600">[m
[31m-                            Page {index + 1}[m
[31m-                          </span>[m
[31m-                          <span className="text-xs text-gray-400">[m
[31m-                            {index + 1} of {numPages}[m
[31m-                          </span>[m
[31m-                        </div>[m
[31m-                        <div className="border border-gray-200 rounded-lg overflow-hidden">[m
[31m-                          <Page[m
[31m-                            pageNumber={index + 1}[m
[31m-                            className="mx-auto"[m
[31m-                            scale={0.8}[m
[31m-                            loading={<div className="text-center py-8 text-gray-500">Loading page...</div>}[m
[31m-                          />[m
[31m-                        </div>[m
[31m-                      </div>[m
[31m-                    ))}[m
[31m-                  </Document>[m
[31m-                </div>[m
[32m+[m[32m            </div>[m
 [m
[31m-                {/* OCR Text Column */}[m
[31m-                <div className="space-y-8">[m
[31m-                  <h2 className="text-xl font-semibold text-gray-700 sticky top-0 bg-gray-100 py-2">[m
[31m-                    OCR Text[m
[31m-                  </h2>[m
[31m-                  {numPages && Array.from({ length: numPages }, (_, index) => ([m
[31m-                    <div key={index + 1} className="bg-white p-4 rounded-lg shadow-md">[m
[31m-                      <div className="mb-3 flex justify-between items-center">[m
[31m-                        <label [m
[31m-                          htmlFor={`ocr-text-${index + 1}`}[m
[31m-                          className="block text-sm font-medium text-gray-700"[m
[31m-                        >[m
[31m-                          Page {index + 1} OCR Text[m
[31m-                        </label>[m
[31m-                        <span className="text-xs text-gray-400">[m
[31m-                          {ocrTexts[index + 1]?.length || 0} characters[m
[31m-                        </span>[m
[31m-                      </div>[m
[31m-                      <textarea[m
[31m-                        id={`ocr-text-${index + 1}`}[m
[31m-                        value={ocrTexts[index + 1] || ''}[m
[31m-                        onChange={(e: ChangeEvent<HTMLTextAreaElement>) => handleOcrTextChange(index + 1, e.target.value)}[m
[31m-                        placeholder="Enter or paste OCR text for this page..."[m
[31m-                        className={`w-full ${getTextareaHeight(index + 1)} p-3 border border-gray-300 rounded-md [m
[31m-                          focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 ${getTextareaResize()}[m
[31m-                          text-sm leading-relaxed transition-colors`}[m
[31m-                      />[m
[31m-                    </div>[m
[31m-                  ))}[m
[32m+[m[32m            {/* OCR Text Column */}[m
[32m+[m[32m            <div className="space-y-8">[m
[32m+[m[32m              <h2 className="text-xl font-semibold text-gray-700 sticky top-0 bg-gray-100 py-2">[m
[32m+[m[32m                OCR Text[m
[32m+[m[32m              </h2>[m
[32m+[m[32m              {numPages && Array.from({ length: numPages }, (_, index) => ([m
[32m+[m[32m                <div key={index + 1} className="bg-white p-4 rounded-lg shadow-md">[m
[32m+[m[32m                  <div className="mb-3 flex justify-between items-center">[m
[32m+[m[32m                    <label[m[41m [m
[32m+[m[32m                      htmlFor={`ocr-text-${index + 1}`}[m
[32m+[m[32m                      className="block text-sm font-medium text-gray-700"[m
[32m+[m[32m                    >[m
[32m+[m[32m                      Page {index + 1} OCR Text[m
[32m+[m[32m                    </label>[m
[32m+[m[32m                    <span className="text-xs text-gray-400">[m
[32m+[m[32m                      {ocrTexts[index + 1]?.length || 0} characters[m
[32m+[m[32m                    </span>[m
[32m+[m[32m                  </div>[m
[32m+[m[32m                  <textarea[m
[32m+[m[32m                    id={`ocr-text-${index + 1}`}[m
[32m+[m[32m                    value={ocrTexts[index + 1] || ''}[m
[32m+[m[32m                    onChange={(e: ChangeEvent<HTMLTextAreaElement>) => handleOcrTextChange(index + 1, e.target.value)}[m
[32m+[m[32m                    placeholder="Enter or paste OCR text for this page..."[m
[32m+[m[32m                    className="w-full h-64 p-3 border border-gray-300 rounded-md[m[41m [m
[32m+[m[32m                      focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 resize-none[m
[32m+[m[32m                      text-sm leading-relaxed transition-colors"[m
[32m+[m[32m                  />[m
                 </div>[m
[31m-              </>[m
[31m-            )}[m
[32m+[m[32m              ))}[m
[32m+[m[32m            </div>[m
           </div>[m
         )}[m
 [m
[36m@@ -346,6 +251,49 @@[m [mconst PDFNotebook: React.FC = () => {[m
             </div>[m
           </div>[m
         )}[m
[32m+[m
[32m+[m[32m        {/* Enlarged PDF Modal */}[m
[32m+[m[32m        {isModalOpen && enlargedPage && pdfFile && ([m
[32m+[m[32m          <div[m[41m [m
[32m+[m[32m            className="fixed inset-0 z-50 bg-black bg-opacity-75 flex items-center justify-center p-4"[m
[32m+[m[32m            onClick={closeEnlargedView}[m
[32m+[m[32m          >[m
[32m+[m[32m            <div className="relative max-w-7xl max-h-full bg-white rounded-lg shadow-2xl">[m
[32m+[m[32m              {/* Close button */}[m
[32m+[m[32m              <button[m
[32m+[m[32m                onClick={closeEnlargedView}[m
[32m+[m[32m                className="absolute top-4 right-4 z-10 bg-white rounded-full p-2 shadow-lg hover:bg-gray-100 transition-colors"[m
[32m+[m[32m                aria-label="Close enlarged view"[m
[32m+[m[32m              >[m
[32m+[m[32m                <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">[m
[32m+[m[32m                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />[m
[32m+[m[32m                </svg>[m
[32m+[m[32m              </button>[m
[32m+[m[41m              [m
[32m+[m[32m              {/* Page info */}[m
[32m+[m[32m              <div className="absolute top-4 left-4 z-10 bg-white rounded-lg px-3 py-2 shadow-lg">[m
[32m+[m[32m                <span className="text-sm font-medium text-gray-700">[m
[32m+[m[32m                  Page {enlargedPage} of {numPages}[m
[32m+[m[32m                </span>[m
[32m+[m[32m              </div>[m
[32m+[m
[32m+[m[32m              {/* PDF content */}[m
[32m+[m[32m              <div[m[41m [m
[32m+[m[32m                className="p-4 overflow-auto max-h-full"[m
[32m+[m[32m                onClick={(e) => e.stopPropagation()}[m
[32m+[m[32m              >[m
[32m+[m[32m                <Document file={pdfFile}>[m
[32m+[m[32m                  <Page[m
[32m+[m[32m                    pageNumber={enlargedPage}[m
[32m+[m[32m                    className="mx-auto"[m
[32m+[m[32m                    scale={1.5}[m
[32m+[m[32m                    loading={<div className="text-center py-8 text-gray-500">Loading enlarged page...</div>}[m
[32m+[m[32m                  />[m
[32m+[m[32m                </Document>[m
[32m+[m[32m              </div>[m
[32m+[m[32m            </div>[m
[32m+[m[32m          </div>[m
[32m+[m[32m        )}[m
       </div>[m
     </div>[m
   );[m
